// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace TalkClass.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20251021230939_AddIdentificacaoFeedback")]
    partial class AddIdentificacaoFeedback
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TalkClass.Domain.Entities.Administrador", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("character varying(11)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(160)
                        .HasColumnType("character varying(160)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)");

                    b.Property<string>("Roles")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("SenhaHash")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.HasIndex("Cpf")
                        .IsUnique();

                    b.HasIndex("IsActive");

                    b.ToTable("administradores", (string)null);
                });

            modelBuilder.Entity("TalkClass.Domain.Entities.Categoria", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Ativa")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CriadoEm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Descricao")
                        .HasColumnType("text");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Ordem")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Categorias");
                });

            modelBuilder.Entity("TalkClass.Domain.Entities.Feedback", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CategoriaId")
                        .HasColumnType("uuid");

                    b.Property<string>("ContatoIdentificado")
                        .HasMaxLength(160)
                        .HasColumnType("character varying(160)");

                    b.Property<DateTime>("CriadoEm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CursoOuTurma")
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)");

                    b.Property<string>("NomeIdentificado")
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)");

                    b.HasKey("Id");

                    b.HasIndex("CategoriaId");

                    b.ToTable("feedbacks", (string)null);
                });

            modelBuilder.Entity("TalkClass.Domain.Entities.FeedbackResposta", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("FeedbackId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PerguntaId")
                        .HasColumnType("uuid");

                    b.Property<int>("Tipo")
                        .HasColumnType("integer");

                    b.Property<bool?>("ValorBool")
                        .HasColumnType("boolean");

                    b.Property<int?>("ValorNota")
                        .HasColumnType("integer");

                    b.Property<string>("ValorOpcao")
                        .HasColumnType("text");

                    b.Property<string>("ValorTexto")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("FeedbackId");

                    b.HasIndex("PerguntaId");

                    b.ToTable("FeedbackRespostas");
                });

            modelBuilder.Entity("TalkClass.Domain.Entities.Pergunta", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Ativa")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<Guid>("CategoriaId")
                        .HasColumnType("uuid");

                    b.Property<string>("Enunciado")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("Obrigatoria")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<int>("Ordem")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<int>("Tipo")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Ordem");

                    b.HasIndex("Tipo");

                    b.HasIndex("CategoriaId", "Ativa");

                    b.ToTable("perguntas", (string)null);
                });

            modelBuilder.Entity("TalkClass.Domain.Entities.PerguntaOpcao", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("PerguntaId")
                        .HasColumnType("uuid");

                    b.Property<string>("Texto")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("Valor")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PerguntaId");

                    b.ToTable("pergunta_opcoes", (string)null);
                });

            modelBuilder.Entity("TalkClass.Domain.Entities.Feedback", b =>
                {
                    b.HasOne("TalkClass.Domain.Entities.Categoria", "Categoria")
                        .WithMany("Feedbacks")
                        .HasForeignKey("CategoriaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Categoria");
                });

            modelBuilder.Entity("TalkClass.Domain.Entities.FeedbackResposta", b =>
                {
                    b.HasOne("TalkClass.Domain.Entities.Feedback", "Feedback")
                        .WithMany("Respostas")
                        .HasForeignKey("FeedbackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TalkClass.Domain.Entities.Pergunta", "Pergunta")
                        .WithMany("Respostas")
                        .HasForeignKey("PerguntaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Feedback");

                    b.Navigation("Pergunta");
                });

            modelBuilder.Entity("TalkClass.Domain.Entities.Pergunta", b =>
                {
                    b.HasOne("TalkClass.Domain.Entities.Categoria", "Categoria")
                        .WithMany("Perguntas")
                        .HasForeignKey("CategoriaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Categoria");
                });

            modelBuilder.Entity("TalkClass.Domain.Entities.PerguntaOpcao", b =>
                {
                    b.HasOne("TalkClass.Domain.Entities.Pergunta", "Pergunta")
                        .WithMany("Opcoes")
                        .HasForeignKey("PerguntaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pergunta");
                });

            modelBuilder.Entity("TalkClass.Domain.Entities.Categoria", b =>
                {
                    b.Navigation("Feedbacks");

                    b.Navigation("Perguntas");
                });

            modelBuilder.Entity("TalkClass.Domain.Entities.Feedback", b =>
                {
                    b.Navigation("Respostas");
                });

            modelBuilder.Entity("TalkClass.Domain.Entities.Pergunta", b =>
                {
                    b.Navigation("Opcoes");

                    b.Navigation("Respostas");
                });
#pragma warning restore 612, 618
        }
    }
}
